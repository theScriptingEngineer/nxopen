name: documentation

on: push

env:
  PROJECT_ID: nxopendocumentationdocker
  REGION: europe-west4
  REPO_NAME: nxopentsedocumentation
  DOCKER_IMAGE_NAME: sphinx-docs-nginxdocker
  SERVICE: nxopentse-documentation

permissions:
  contents: write

jobs:
  docs:

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
      # - name: Install dependencies
      #   run: |
      #     pip install sphinx sphinx_rtd_theme myst_parser
      # - name: Sphinx build
      #   run: |
      #     sphinx-build -M html docs/source/ docs/build/

      # - name: Build the Docker image
      #   run: docker build . --file ./docs/DocsDockerfile --tag ${{env.REGION}}-docker.pkg.dev/${{env.PROJECT_ID}}/${{env.REPO_NAME}}/${{env.DOCKER_IMAGE_NAME}}:latest

      - uses: 'google-github-actions/auth@v2'
        with:
          # project_id: ${{env.PROJECT_ID}}
          # workload_identity_provider: 'projects/797139687884/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          # service_account: 'artifactregistry@nxopendocumentationdocker.iam.gserviceaccount.com'
          # token_format: 'access_token'  
          credentials_json: ${{ secrets.GOOGLE_ARTIFACTREGISTY_CREDENTIALS }}
          token_format: 'access_token'

      # This example runs "docker login" directly to Container Registry.
      - name: Docker login
        run: echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin ${{env.REGION}}-docker.pkg.dev

      - name: 'Docker push'
        run: |-
          docker push ${{env.REGION}}-docker.pkg.dev/${{env.PROJECT_ID}}/${{env.REPO_NAME}}/${{env.DOCKER_IMAGE_NAME}}:latest

  # deploy:
  #   needs: docker-release
  #   name: deploy
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
    
  #   # from https://github.com/google-github-actions/deploy-cloudrun#credentials
  #   - id: 'authCloudRun'
  #     uses: 'google-github-actions/auth@v0'
  #     with:
  #       credentials_json: '${{ secrets.GOOGLE_CLOUDRUN_CREDENTIALS }}'

  #   # docs: https://github.com/marketplace/actions/deploy-to-cloud-run
  #   - name: 'Deploy to Cloud Run'
  #     uses: 'google-github-actions/deploy-cloudrun@v0'
  #     with:
  #       image: ${{env.REGION}}-docker.pkg.dev/${{env.PROJECT_ID}}/${{env.REPO_NAME}}/${{env.DOCKER_IMAGE_NAME}}:latest
  #       service: ${{env.SERVICE}}
  #       region: ${{env.REGION}}